from bcdebug import debug
# Persistant Config Library V1
#  By MLeo Daalder

# Use:
#  You create a Config object, which holds the module name (relative to scripts/Custom)
#  You can make a config in a sub directory of scripts/Custom by the following:
#   LibConfig.Config("TestDir\\TestConfig")
#
#  The ways of accessing/mutating items are:
#   get(name, [Value When No Value Found])
#   set(name, value)
#   And using the subscript ([ ]) operator. No slices btw ([:]).
#
#  This will also save it directly
#
#  This also has a has_key function.

# Licence:
#  Feel free to include it in any mod you like.
#  A single line of credits would be nice (such as: "Uses Config Library by MLeo" would be enough) but not required.
#  Though this file must be in it's exact state as it is when you got it.
#  If you find any bugs, feel free to pass them on to me and I'll make a patch.

import string
import nt

class Config:
	lBuiltIns = ["OpenFile","SaveFile","get","set","__getitem__","__setitem__","has_key","sModule","sFile","module", "__repr__", "__str__"]
	def __init__(self, sFile):
		debug(__name__ + ", __init__")
		self.sFile = "scripts\\Custom\\" + sFile + ".py"
		self.module = None
		self.sOrigFile = sFile

		self.sModule = "Custom." + sFile

	def OpenFile(self):
		debug(__name__ + ", OpenFile")
		while(not self.module):
			try:
				self.module = __import__(self.sModule)
			except:
				self.SaveFile()

	def SaveFile(self):
		debug(__name__ + ", SaveFile")
		config = {}
		if self.module:
			config.update(self.module.config)

		file = nt.open(self.sFile, nt.O_CREAT | nt.O_WRONLY | nt.O_BINARY | nt.O_TRUNC)
		nt.write(file, "# File generated by the Config Library from MLeo Daalder\n# Edit on own accord!\n\n")

		# Yes, I know I could just stringify the dictonary, but I like readable configuration files.
		nt.write(file, "config = {\n")
		for key, value in config.items():
			nt.write(file, '"""' + str(key) + '""": ' + str(value) + ",\n")
		nt.write(file, "}\n")
		nt.close(file)
		if self.module:
			reload(self.module)

	def has_key(self, name):
		debug(__name__ + ", has_key")
		if not self.module:
			self.OpenFile()
		if name == "__dict__" or name in Config.lBuiltIns:
			return 1
		return self.module.config.has_key(name)

	def get(self, name, opt = None):
		debug(__name__ + ", get")
		if self.has_key(name):
			if name == "__dict__":
				return self.__dict__
			elif name in Config.lBuiltIns:
				return self.__dict__[name]
			if not self.module:
				self.OpenFile()
			return self.module.config.get(name)

#			return self.__getattr__(name)
		return opt

	def set(self, name, value):
		debug(__name__ + ", set")
		if name == "sFile" or name == "sModule" or name == "module":
			self.__dict__[name] = value
			return
		if not self.module:
			self.OpenFile()
		self.module.config[name] = value
		self.SaveFile()
		#self.__setattr__(name, value)

	"""def __getattr__(self, name):
		print name
		if name == "__dict__":
			return self.__dict__
		elif name in Config.lBuiltIns:
			return self.__dict__[name]

		if not self.module:
			self.OpenFile()
		return self.module.config.get(name)

	def __setattr__(self, name, value):
		debug(__name__ + ", __setattr__")
		if name == "sFile" or name == "sModule" or name == "module":
			self.__dict__[name] = value
			return
		if not self.module:
			self.OpenFile()
		self.module.config[name] = value
		self.SaveFile()"""

	def __getitem__(self, name):
		debug(__name__ + ", __getitem__")
		return self.get(name)

	def __setitem__(self, name, value):
		debug(__name__ + ", __setitem__")
		self.set(name, value)

	def __repr__(self):
		debug(__name__ + ", __repr__")
		return "<Config on " + self.sModule + ">"
	def __str__(self):
		debug(__name__ + ", __str__")
		return self.__repr__()

	# Defiant fix save/load in KM
	def __getstate__(self):
		debug(__name__ + ", __getstate__")
		dState = {'sOrigFile': self.sOrigFile}
		return dState

	def __setstate__(self, dict):
		debug(__name__ + ", __setstate__")
		self.__dict__ = dict
		
		self.sFile = "scripts\\Custom\\" + self.sOrigFile + ".py"
		self.sModule = "Custom." + self.sOrigFile
